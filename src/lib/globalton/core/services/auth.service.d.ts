import { EventEmitter } from '@angular/core';
import { Headers, Http } from '@angular/http';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/timeout';
import { MessageService } from './message.service';
import { CurrencyService } from '../services/currency.service';
import { ConsoleService } from './console.service';
import { RequestService } from './request.service';
import { ConfigService } from './config.service';
//import { TranslateService } from './translate.service';
import {TranslateService} from '@ngx-translate/core';
import {Location} from '@angular/common';
import { ObjectId } from "../interfaces/interfaces";
export declare class AuthService {
    private http;
    messageService: MessageService;
    private consoleService;
    private translateService;
    private currencyService;
    private configService;
    private requestService;
    loginChanged: EventEmitter<any>;
    baseurl: string;
    userId: ObjectId;
    isTourDone:boolean;
    loginResponse: {
        token: string;
        lang: string;
        currency: string;
        timezone: string;
        cart: ObjectId;
    };
    token: string;
    data: any;
    authenticated: boolean;
    timezone: string;
    ioid: ObjectId;
    authGetHeaders: Headers;
    noauthGetHeaders: Headers;
    authPostHeaders: Headers;
    noauthPostHeaders: Headers;
    localStorageKey: string;
    constructor(http: Http, messageService: MessageService, consoleService: ConsoleService, translateService: TranslateService, currencyService: CurrencyService, configService: ConfigService, requestService: RequestService);
    setLocalStorageKey(): void;
    getUserId(f: Function): void;
    postLogin(): void;
    login(email: string, password: string, rememberme: boolean, f: any): void;
    login2(email: any, password: any, rememberme: any, f: any): void;
    checkAuthenticated(router: any, location: Location): boolean;
    processError(err: any, f: any): void;
    getToken(): string;
    isAuthenticated(): boolean;
    setTokenFromLocalStorage(): void;
    updateLocalStorage(): void;
    processLogin(data: any, rememberme: boolean, f: any): any;
    createAuthHeaders(): void;
    createNoAuthHeaders(): void;
    private emitAuthStatus();
    logError(err: any): void;
    doLogout(): void;
}
