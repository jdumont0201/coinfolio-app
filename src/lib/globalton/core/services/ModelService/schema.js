"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var apiinterface_1 = require("./apiinterface");
var utils_1 = require("../../utils/utils");
var Schema = (function () {
    function Schema(modelType, modelService, apiService, consoleService, configService) {
        this.modelService = modelService;
        this.apiService = apiService;
        this.consoleService = consoleService;
        this.configService = configService;
        this.API_RETURN_ARRAYS = false;
        this.modelType = modelType;
        this.apiInterface = new apiinterface_1.ApiInterface(modelType, configService);
        if (!apiService)
            console.error("No apiservice in schema");
    }
    //GET
    Schema.prototype.getMultipleById = function (idlist, options, f) {
        var _this = this;
        if (idlist.length === 1) {
            var id = idlist[0];
            this.getById(id, options, function (m) {
                f([m]);
            });
        }
        else {
            var idliststr = idlist.join("--");
            var url = this.apiInterface.buildUrlSuffix(idliststr, options);
            this.apiService.authget(url, function (rawdatas) {
                console.log("getMultipleById", rawdatas);
                var M = [];
                for (var id in rawdatas.main) {
                    var raw = rawdatas.main[id];
                    var returnedModel = _this.modelService.loader.get(_this.modelType, raw, rawdatas.populated, options);
                    M.push(returnedModel);
                }
                if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded() && _this.configService.UPDATE_AFTER_GET)
                    _this.modelService.library.partialUpdateAllWithTimestamp(rawdatas, _this.modelType);
                console.log("getMultipleById res ", M);
                f(M);
            });
        }
    };
    Schema.prototype.getById = function (id, options, f) {
        var _this = this;
        utils_1.Assert.exists(id, "schema getbyid has no id");
        var url = this.apiInterface.buildUrlSuffix(id, options);
        this.apiService.authget(url, function (rawdatas) {
            console.log("schema getById", id, rawdatas);
            var newId;
            if (id === "me")
                newId = "me";
            else if (id === "mycart")
                newId = "mycart";
            else if (id === "me/id")
                newId = "me";
            else if (id.substr(0, 4) === "me/a")
                newId = "me";
            else
                newId = id;
            console.log(newId);
            //make array
            var raw;
            if (!rawdatas.hasOwnProperty(newId)) {
                raw = rawdatas;
                raw._id = newId;
            } //let rawdatas2=[]; rawdatas2[newId]=rawdatas;rawdatas=rawdatas2;}
            else {
                raw = rawdatas[newId];
                if (id !== "me/id")
                    raw._id = newId;
            }
            var returnedModel = _this.modelService.loader.get(_this.modelType, raw, rawdatas, options);
            if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded() && _this.configService.UPDATE_AFTER_GET)
                _this.modelService.library.partialUpdateWithTimestamp(raw, _this.modelType);
            f(returnedModel);
        });
    };
    Schema.prototype.getAll = function (options, f) {
        var _this = this;
        console.log("Schema getAll type=", this.modelType, "options=", options);
        var url = this.apiInterface.buildUrlSuffix("", options);
        this.apiService.authget(url, function (rawdata) {
            console.log("Schema getAll data=", rawdata);
            var M = _this.modelService.loader.getAll(_this.modelType, rawdata, null, options);
            _this.consoleService.load("getAll [models]=", M, M.length + " items");
            if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded() && _this.configService.UPDATE_AFTER_GET)
                _this.modelService.library.partialUpdateAllWithTimestamp(rawdata, _this.modelType);
            f(M);
        });
    };
    Schema.prototype.put = function (model, f, overridedUrl) {
        var _this = this;
        var url = this.apiInterface.getUrl(model._id);
        console.log("Schema put", url);
        if (overridedUrl)
            url = overridedUrl;
        this.apiService.authput(url, model, function (rawdata) {
            //let returnedModel = this.buildModel(data, model.modelType);
            var id = model._id;
            var raw;
            if (id in rawdata)
                raw = rawdata[id];
            else
                raw = rawdata;
            var returnedModel = _this.modelService.loader.get(_this.modelType, raw, rawdata);
            console.log("Schema putdata ", returnedModel);
            if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded() && _this.configService.UPDATE_AFTER_POSTPUTPATCH)
                _this.modelService.library.completeUpdate(raw, _this.modelType);
            f(returnedModel);
        });
    };
    Schema.prototype.patch = function (model, referenceRaw, f, overridedUrl) {
        var _this = this;
        console.log("Schema patch ", model, " ref", referenceRaw);
        var url = this.apiInterface.getUrl(model._id);
        console.log("Schema patch url", url);
        if (overridedUrl)
            url = overridedUrl;
        this.apiService.authpatch(url, model, referenceRaw, function (rawdata) {
            console.log("Schema patchdata ", rawdata);
            var id = model._id;
            var raw;
            if (id in rawdata)
                raw = rawdata[id];
            else
                raw = rawdata;
            var returnedModel = _this.modelService.loader.get(model.modelType, raw, rawdata);
            console.log("Schema patchdata ", returnedModel);
            if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded() && _this.configService.UPDATE_AFTER_POSTPUTPATCH)
                _this.modelService.library.partialUpdate(raw, _this.modelType);
            f(returnedModel);
        });
    };
    Schema.prototype.post = function (model, f) {
        var _this = this;
        var url = this.apiInterface.getUrl();
        console.log("Schema post url", url);
        this.apiService.authpost(url, model, function (rawdata) {
            console.log("Schema postdata ", rawdata);
            //let id = Object.keys(rawdata)[0];
            if (!rawdata.returnMultiple) {
                var returnedModel = _this.modelService.loader.get(model.modelType, rawdata, rawdata);
                console.log("Schema postdata returned model ", returnedModel);
                //TODO ADD TO LIBRARY
                f(returnedModel);
            }
            else {
                var raw = rawdata; //rawdata[id];
                var returnedModel = _this.modelService.loader.get(_this.modelType, raw, rawdata);
                if (_this.configService.LIBRARY_ENABLED && _this.modelService.library.isPreloaded())
                    _this.modelService.library.addRaw(raw, _this.modelType);
                f(rawdata);
            }
        });
    };
    Schema.prototype.noauthpost = function (model, f, forcedRoute) {
        var url = forcedRoute ? forcedRoute : this.apiInterface.getUrl(model._id);
        console.log("Schema noauthpost url", url);
        this.apiService.noauthpost(url, model, function (data) {
            console.log("noauthpostdata ", data);
            f(data);
        });
    };
    Schema.prototype.delete = function (id, f) {
        var url = this.apiInterface.getUrl(id);
        this.apiService.authdelete(url, function (data) {
            console.log("deletedata", data);
            f(data);
        });
    };
    Schema.prototype.postId = function (id, f) {
        var url = this.apiInterface.getUrl(id);
        this.apiService.authpost(url, null, function (data) {
            console.log("deletedata", data);
            f(data);
        });
    };
    return Schema;
}());
exports.Schema = Schema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsK0NBQTJDO0FBSTNDLDJDQUF5RDtBQUV6RDtJQU9JLGdCQUNJLFNBQW9CLEVBQ2IsWUFBMEIsRUFDekIsVUFBc0IsRUFDdEIsY0FBOEIsRUFDOUIsYUFBNEI7UUFIN0IsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDekIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFOeEMsc0JBQWlCLEdBQUMsS0FBSyxDQUFDO1FBUXBCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSwyQkFBWSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMvRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM3RCxDQUFDO0lBSUQsS0FBSztJQUNMLGdDQUFlLEdBQWYsVUFBaUMsTUFBa0IsRUFBRSxPQUE0QixFQUFFLENBQVc7UUFBOUYsaUJBNkJDO1FBNUJHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLEVBQUUsR0FBVSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVMsQ0FBRztnQkFDckMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxTQUFTLEdBQVcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FB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RyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxVQUFDLElBQUk7WUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCx1QkFBTSxHQUFOLFVBQU8sRUFBWSxFQUFFLENBQVc7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFVBQUMsSUFBSTtZQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCx1QkFBTSxHQUFOLFVBQU8sRUFBWSxFQUFFLENBQVc7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFDLElBQUk7WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUwsYUFBQztBQUFELENBQUMsQUE5S0QsSUE4S0M7QUE5S2Esd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge1BhZ2VTZXJ2aWNlfSBmcm9tICcuLi9wYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQge01vZGVsU2VydmljZX0gZnJvbSAnLi4vbW9kZWwuc2VydmljZSc7XHJcbmltcG9ydCB7Q29uZmlnU2VydmljZX0gZnJvbSAnLi4vY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQge0NvbnNvbGVTZXJ2aWNlfSBmcm9tICcuLi9jb25zb2xlLnNlcnZpY2UnO2ltcG9ydCB7QXBpU2VydmljZX0gICAgZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHtNb2RlbH0gZnJvbSBcIi4uLy4uL21vZGVscy9Nb2RlbFwiO1xyXG5pbXBvcnQge0FwaUludGVyZmFjZX0gZnJvbSBcIi4vYXBpaW50ZXJmYWNlXCJcclxuXHJcbmltcG9ydCB7T2JqZWN0SWQsIE1vZGVsVHlwZSwgUmVxdWVzdFF1ZXJ5T3B0aW9ucywgUmF3SGFzaCwgUmF3R2V0QWxsSGFzaCwgUmF3fSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzXCJcclxuaW1wb3J0IHtBUElfUkVUVVJOX01PREVTfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY29uZmlnLnNlcnZpY2VcIlxyXG5pbXBvcnQge0Fzc2VydCwgY2xvbmUsIGNsb25lUmF3fSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIlxyXG5cclxuZXhwb3J0ICBjbGFzcyBTY2hlbWEge1xyXG4gICAgYXBpSW50ZXJmYWNlOiBBcGlJbnRlcmZhY2U7XHJcbiAgICBwYWdlU2VydmljZTogUGFnZVNlcnZpY2U7XHJcblxyXG4gICAgbW9kZWxUeXBlOiBNb2RlbFR5cGU7XHJcblxyXG4gICAgQVBJX1JFVFVSTl9BUlJBWVM9ZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBtb2RlbFR5cGU6IE1vZGVsVHlwZSxcclxuICAgICAgICBwdWJsaWMgbW9kZWxTZXJ2aWNlOiBNb2RlbFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY29uc29sZVNlcnZpY2U6IENvbnNvbGVTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY29uZmlnU2VydmljZTogQ29uZmlnU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbFR5cGUgPSBtb2RlbFR5cGU7XHJcbiAgICAgICAgdGhpcy5hcGlJbnRlcmZhY2UgPSBuZXcgQXBpSW50ZXJmYWNlKG1vZGVsVHlwZSwgY29uZmlnU2VydmljZSk7XHJcbiAgICAgICAgaWYgKCFhcGlTZXJ2aWNlKSBjb25zb2xlLmVycm9yKFwiTm8gYXBpc2VydmljZSBpbiBzY2hlbWFcIilcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vR0VUXHJcbiAgICBnZXRNdWx0aXBsZUJ5SWQ8VCBleHRlbmRzIE1vZGVsPihpZGxpc3Q6IE9iamVjdElkW10sIG9wdGlvbnM6IFJlcXVlc3RRdWVyeU9wdGlvbnMsIGY6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGlkbGlzdC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgbGV0IGlkOnN0cmluZyA9IGlkbGlzdFswXTtcclxuICAgICAgICAgICAgdGhpcy5nZXRCeUlkPFQ+KGlkLCBvcHRpb25zLCBmdW5jdGlvbihtOlQpe1xyXG4gICAgICAgICAgICAgICAgZihbbV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaWRsaXN0c3RyOiBzdHJpbmcgPSBpZGxpc3Quam9pbihcIi0tXCIpO1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy5hcGlJbnRlcmZhY2UuYnVpbGRVcmxTdWZmaXgoaWRsaXN0c3RyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmF1dGhnZXQodXJsLCAocmF3ZGF0YXM6IFJhd0dldEFsbEhhc2gpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0TXVsdGlwbGVCeUlkXCIsIHJhd2RhdGFzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgTSA6VFtdPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGlkIGluIHJhd2RhdGFzLm1haW4pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhdzogUmF3ID0gcmF3ZGF0YXMubWFpbltpZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldHVybmVkTW9kZWw6IFQgPSB0aGlzLm1vZGVsU2VydmljZS5sb2FkZXIuZ2V0PFQ+KHRoaXMubW9kZWxUeXBlLCByYXcsIHJhd2RhdGFzLnBvcHVsYXRlZCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgTS5wdXNoKHJldHVybmVkTW9kZWwpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ1NlcnZpY2UuTElCUkFSWV9FTkFCTEVEICYmIHRoaXMubW9kZWxTZXJ2aWNlLmxpYnJhcnkuaXNQcmVsb2FkZWQoKSAmJiB0aGlzLmNvbmZpZ1NlcnZpY2UuVVBEQVRFX0FGVEVSX0dFVClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsU2VydmljZS5saWJyYXJ5LnBhcnRpYWxVcGRhdGVBbGxXaXRoVGltZXN0YW1wKHJhd2RhdGFzLCB0aGlzLm1vZGVsVHlwZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImdldE11bHRpcGxlQnlJZCByZXMgXCIsIE0pO1xyXG4gICAgICAgICAgICAgICAgZihNKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEJ5SWQ8VCBleHRlbmRzIE1vZGVsPihpZDogT2JqZWN0SWQsIG9wdGlvbnM6IFJlcXVlc3RRdWVyeU9wdGlvbnMsIGY6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgQXNzZXJ0LmV4aXN0cyhpZCwgXCJzY2hlbWEgZ2V0YnlpZCBoYXMgbm8gaWRcIik7XHJcbiAgICAgICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5hcGlJbnRlcmZhY2UuYnVpbGRVcmxTdWZmaXgoaWQsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuYXBpU2VydmljZS5hdXRoZ2V0KHVybCwgKHJhd2RhdGFzOiBSYXdIYXNoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2NoZW1hIGdldEJ5SWRcIiwgaWQsIHJhd2RhdGFzKTtcclxuICAgICAgICAgICAgbGV0IG5ld0lkO1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IFwibWVcIikgbmV3SWQgPSBcIm1lXCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlkID09PSBcIm15Y2FydFwiKSBuZXdJZCA9IFwibXljYXJ0XCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlkID09PSBcIm1lL2lkXCIpIG5ld0lkID0gXCJtZVwiO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpZC5zdWJzdHIoMCw0KSA9PT0gXCJtZS9hXCIpIG5ld0lkID0gXCJtZVwiO1xyXG4gICAgICAgICAgICBlbHNlIG5ld0lkPWlkO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhuZXdJZCk7XHJcblxyXG4gICAgICAgICAgICAvL21ha2UgYXJyYXlcclxuICAgICAgICAgICAgbGV0IHJhdzogUmF3O1xyXG4gICAgICAgICAgICBpZighcmF3ZGF0YXMuaGFzT3duUHJvcGVydHkobmV3SWQpICkge3Jhdz1yYXdkYXRhcztyYXcuX2lkID0gbmV3SWQ7fS8vbGV0IHJhd2RhdGFzMj1bXTsgcmF3ZGF0YXMyW25ld0lkXT1yYXdkYXRhcztyYXdkYXRhcz1yYXdkYXRhczI7fVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJhdyA9IHJhd2RhdGFzW25ld0lkXTtcclxuICAgICAgICAgICAgICAgIGlmIChpZCAhPT0gXCJtZS9pZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJhdy5faWQgPSBuZXdJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcmV0dXJuZWRNb2RlbDogVCA9IHRoaXMubW9kZWxTZXJ2aWNlLmxvYWRlci5nZXQ8VD4odGhpcy5tb2RlbFR5cGUsIHJhdywgcmF3ZGF0YXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdTZXJ2aWNlLkxJQlJBUllfRU5BQkxFRCAmJiB0aGlzLm1vZGVsU2VydmljZS5saWJyYXJ5LmlzUHJlbG9hZGVkKCkgJiYgdGhpcy5jb25maWdTZXJ2aWNlLlVQREFURV9BRlRFUl9HRVQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsU2VydmljZS5saWJyYXJ5LnBhcnRpYWxVcGRhdGVXaXRoVGltZXN0YW1wKHJhdywgdGhpcy5tb2RlbFR5cGUpO1xyXG4gICAgICAgICAgICBmKHJldHVybmVkTW9kZWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSBcclxuICAgIGdldEFsbDxUIGV4dGVuZHMgTW9kZWw+KG9wdGlvbnM6IFJlcXVlc3RRdWVyeU9wdGlvbnMsIGY6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgZ2V0QWxsIHR5cGU9XCIsIHRoaXMubW9kZWxUeXBlLCBcIm9wdGlvbnM9XCIsIG9wdGlvbnMpXHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuYXBpSW50ZXJmYWNlLmJ1aWxkVXJsU3VmZml4KFwiXCIsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuYXBpU2VydmljZS5hdXRoZ2V0KHVybCwgKHJhd2RhdGE6IFJhd0dldEFsbEhhc2gpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgZ2V0QWxsIGRhdGE9XCIsIHJhd2RhdGEpO1xyXG4gICAgICAgICAgICBsZXQgTTogVFtdID0gdGhpcy5tb2RlbFNlcnZpY2UubG9hZGVyLmdldEFsbDxUPih0aGlzLm1vZGVsVHlwZSwgcmF3ZGF0YSwgbnVsbCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uc29sZVNlcnZpY2UubG9hZChcImdldEFsbCBbbW9kZWxzXT1cIiwgTSwgTS5sZW5ndGggKyBcIiBpdGVtc1wiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnU2VydmljZS5MSUJSQVJZX0VOQUJMRUQgJiYgdGhpcy5tb2RlbFNlcnZpY2UubGlicmFyeS5pc1ByZWxvYWRlZCgpICYmIHRoaXMuY29uZmlnU2VydmljZS5VUERBVEVfQUZURVJfR0VUKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbFNlcnZpY2UubGlicmFyeS5wYXJ0aWFsVXBkYXRlQWxsV2l0aFRpbWVzdGFtcChyYXdkYXRhLCB0aGlzLm1vZGVsVHlwZSk7XHJcbiAgICAgICAgICAgIGYoTSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0PFQgZXh0ZW5kcyBNb2RlbD4obW9kZWw6IFQsIGY6IEZ1bmN0aW9uLCBvdmVycmlkZWRVcmw/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBsZXQgdXJsID0gdGhpcy5hcGlJbnRlcmZhY2UuZ2V0VXJsKG1vZGVsLl9pZCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgcHV0XCIsIHVybClcclxuICAgICAgICBpZiAob3ZlcnJpZGVkVXJsKSB1cmwgPSBvdmVycmlkZWRVcmw7XHJcbiAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmF1dGhwdXQodXJsLCBtb2RlbCwgKHJhd2RhdGE6IFJhd0hhc2gpID0+IHtcclxuICAgICAgICAgICAgLy9sZXQgcmV0dXJuZWRNb2RlbCA9IHRoaXMuYnVpbGRNb2RlbChkYXRhLCBtb2RlbC5tb2RlbFR5cGUpO1xyXG4gICAgICAgICAgICBsZXQgaWQgPSBtb2RlbC5faWQ7XHJcbiAgICAgICAgICAgIGxldCByYXc6IFJhdztcclxuICAgICAgICAgICAgaWYoaWQgaW4gcmF3ZGF0YSkgcmF3PSByYXdkYXRhW2lkXTtcclxuICAgICAgICAgICAgZWxzZSByYXc9cmF3ZGF0YTtcclxuICAgICAgICAgICAgbGV0IHJldHVybmVkTW9kZWwgOlQgPSB0aGlzLm1vZGVsU2VydmljZS5sb2FkZXIuZ2V0PFQ+KHRoaXMubW9kZWxUeXBlLCByYXcsIHJhd2RhdGEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNjaGVtYSBwdXRkYXRhIFwiLCByZXR1cm5lZE1vZGVsKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnU2VydmljZS5MSUJSQVJZX0VOQUJMRUQgJiYgdGhpcy5tb2RlbFNlcnZpY2UubGlicmFyeS5pc1ByZWxvYWRlZCgpICYmIHRoaXMuY29uZmlnU2VydmljZS5VUERBVEVfQUZURVJfUE9TVFBVVFBBVENIKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbFNlcnZpY2UubGlicmFyeS5jb21wbGV0ZVVwZGF0ZShyYXcsIHRoaXMubW9kZWxUeXBlKTtcclxuICAgICAgICAgICAgZihyZXR1cm5lZE1vZGVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBhdGNoPFQgZXh0ZW5kcyBNb2RlbD4obW9kZWw6IFQsIHJlZmVyZW5jZVJhdzogUmF3LCBmOiBGdW5jdGlvbiwgb3ZlcnJpZGVkVXJsPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgcGF0Y2ggXCIsIG1vZGVsLCBcIiByZWZcIiwgcmVmZXJlbmNlUmF3KTtcclxuICAgICAgICBsZXQgdXJsID0gdGhpcy5hcGlJbnRlcmZhY2UuZ2V0VXJsKG1vZGVsLl9pZCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgcGF0Y2ggdXJsXCIsIHVybClcclxuICAgICAgICBpZiAob3ZlcnJpZGVkVXJsKSB1cmwgPSBvdmVycmlkZWRVcmw7XHJcbiAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmF1dGhwYXRjaCh1cmwsIG1vZGVsLCByZWZlcmVuY2VSYXcsIChyYXdkYXRhOiBSYXdIYXNoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2NoZW1hIHBhdGNoZGF0YSBcIiwgcmF3ZGF0YSk7XHJcbiAgICAgICAgICAgIGxldCBpZDogT2JqZWN0SWQgPSBtb2RlbC5faWQ7XHJcbiAgICAgICAgICAgIGxldCByYXc6IFJhdztcclxuICAgICAgICAgICAgaWYoaWQgaW4gcmF3ZGF0YSkgcmF3PSByYXdkYXRhW2lkXTtcclxuICAgICAgICAgICAgZWxzZSByYXc9cmF3ZGF0YTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXR1cm5lZE1vZGVsOiBUID0gdGhpcy5tb2RlbFNlcnZpY2UubG9hZGVyLmdldDxUPihtb2RlbC5tb2RlbFR5cGUsIHJhdywgcmF3ZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2NoZW1hIHBhdGNoZGF0YSBcIiwgcmV0dXJuZWRNb2RlbCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ1NlcnZpY2UuTElCUkFSWV9FTkFCTEVEICYmIHRoaXMubW9kZWxTZXJ2aWNlLmxpYnJhcnkuaXNQcmVsb2FkZWQoKSAmJiB0aGlzLmNvbmZpZ1NlcnZpY2UuVVBEQVRFX0FGVEVSX1BPU1RQVVRQQVRDSClcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxTZXJ2aWNlLmxpYnJhcnkucGFydGlhbFVwZGF0ZShyYXcsIHRoaXMubW9kZWxUeXBlKTtcclxuICAgICAgICAgICAgZihyZXR1cm5lZE1vZGVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBvc3Q8VCBleHRlbmRzIE1vZGVsPihtb2RlbDogVCwgZjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICBsZXQgdXJsID0gdGhpcy5hcGlJbnRlcmZhY2UuZ2V0VXJsKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgcG9zdCB1cmxcIiwgdXJsKTtcclxuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuYXV0aHBvc3QodXJsLCBtb2RlbCwgKHJhd2RhdGEpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTY2hlbWEgcG9zdGRhdGEgXCIsIHJhd2RhdGEpO1xyXG5cclxuICAgICAgICAgICAgLy9sZXQgaWQgPSBPYmplY3Qua2V5cyhyYXdkYXRhKVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcmF3ZGF0YS5yZXR1cm5NdWx0aXBsZSkgey8vb2Jzb2xldGU/XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0dXJuZWRNb2RlbCA6VCA9IHRoaXMubW9kZWxTZXJ2aWNlLmxvYWRlci5nZXQ8VD4obW9kZWwubW9kZWxUeXBlLCByYXdkYXRhLCByYXdkYXRhKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2NoZW1hIHBvc3RkYXRhIHJldHVybmVkIG1vZGVsIFwiLCByZXR1cm5lZE1vZGVsKTtcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBBREQgVE8gTElCUkFSWVxyXG4gICAgICAgICAgICAgICAgZihyZXR1cm5lZE1vZGVsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCByYXc6IFJhdyA9IHJhd2RhdGE7Ly9yYXdkYXRhW2lkXTtcclxuICAgICAgICAgICAgICAgIGxldCByZXR1cm5lZE1vZGVsOlQgID0gdGhpcy5tb2RlbFNlcnZpY2UubG9hZGVyLmdldDxUPih0aGlzLm1vZGVsVHlwZSwgcmF3LCByYXdkYXRhKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ1NlcnZpY2UuTElCUkFSWV9FTkFCTEVEICYmIHRoaXMubW9kZWxTZXJ2aWNlLmxpYnJhcnkuaXNQcmVsb2FkZWQoKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsU2VydmljZS5saWJyYXJ5LmFkZFJhdyhyYXcsIHRoaXMubW9kZWxUeXBlKTtcclxuICAgICAgICAgICAgICAgIGYocmF3ZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5vYXV0aHBvc3Q8VCBleHRlbmRzIE1vZGVsPihtb2RlbDogVCwgZjogRnVuY3Rpb24sZm9yY2VkUm91dGU/OnN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGxldCB1cmwgPSBmb3JjZWRSb3V0ZT9mb3JjZWRSb3V0ZTp0aGlzLmFwaUludGVyZmFjZS5nZXRVcmwobW9kZWwuX2lkKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlNjaGVtYSBub2F1dGhwb3N0IHVybFwiLCB1cmwpO1xyXG4gICAgICAgIHRoaXMuYXBpU2VydmljZS5ub2F1dGhwb3N0KHVybCwgbW9kZWwsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm9hdXRocG9zdGRhdGEgXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICBmKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlKGlkOiBPYmplY3RJZCwgZjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICBsZXQgdXJsID0gdGhpcy5hcGlJbnRlcmZhY2UuZ2V0VXJsKGlkKTtcclxuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuYXV0aGRlbGV0ZSh1cmwsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGVsZXRlZGF0YVwiLCBkYXRhKTtcclxuICAgICAgICAgICAgZihkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBvc3RJZChpZDogT2JqZWN0SWQsIGY6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuYXBpSW50ZXJmYWNlLmdldFVybChpZCk7XHJcbiAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmF1dGhwb3N0KHVybCwgbnVsbCwgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJkZWxldGVkYXRhXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICBmKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=