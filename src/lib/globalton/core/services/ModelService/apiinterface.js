"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ApiInterface = (function () {
    function ApiInterface(modelType, configService) {
        //console.log("Creating APIInterface",modelType)
        this.configService = configService;
        this.baseurl = configService.getApiUrl();
        this.urlprefix = configService.APIMODELKEYS[modelType];
        if (!this.urlprefix)
            console.error("Urlprefix for model", modelType, "not found in", configService.APIMODELKEYS);
        this.modelType = modelType;
    }
    //for POST PUT DELETE queries
    ApiInterface.prototype.getUrl = function (id) {
        /*if(this.modelType===MODELTYPES.Cart)
            if(id!=="mycart")
            return "mycart"+"/"+id;
            else
            return "mycart";
        else if (this.modelType===MODELTYPES.Me)
            return "me/"+this.configService.app;
        else if (this.modelType===MODELTYPES.Register)
            return "register/"+this.configService.app;
        else*/ if (id)
            return this.urlprefix + "/" + id;
        else
            return this.urlprefix;
    };
    //for GET queries
    ApiInterface.prototype.buildUrlSuffix = function (id, options) {
        var base = "";
        /* if(this.modelType===MODELTYPES.Cart)
          base="mycart";
         else if(this.modelType===MODELTYPES.Me)
          base=id;
         else*/
        if (id)
            base = this.urlprefix + "/" + id;
        else
            base = this.urlprefix;
        var hasOptions = options.populate || options.select || options.match || options.sort || options.limit || options.skip;
        if (hasOptions)
            base += "?";
        var hasAlreadyOptions = "";
        if (options.select) {
            base += "select=" + options.select;
            hasAlreadyOptions = "&";
        }
        if (options.sort) {
            base += hasAlreadyOptions + "sort=" + options.sort;
            hasAlreadyOptions = "&";
        }
        if (options.populate) {
            base += hasAlreadyOptions + "populate=" + JSON.stringify(options.populate);
            hasAlreadyOptions = "&";
        }
        if (options.limit) {
            base += hasAlreadyOptions + "limit=" + JSON.stringify(options.limit);
            hasAlreadyOptions = "&";
        }
        if (options.match) {
            base += hasAlreadyOptions + "match=" + JSON.stringify(options.match);
            hasAlreadyOptions = "&";
        }
        if (options.skip) {
            base += hasAlreadyOptions + "skip=" + JSON.stringify(options.skip);
            hasAlreadyOptions = "&";
        }
        console.log("buildurlsuffix", base);
        return base;
    };
    return ApiInterface;
}());
exports.ApiInterface = ApiInterface;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0E7SUFNSSxzQkFDSSxTQUFtQixFQUNYLGFBQTJCO1FBRS9CLGdEQUFnRDtRQUY1QyxrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQUluQyxJQUFJLENBQUMsT0FBTyxHQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckQsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBQyxTQUFTLEVBQUMsY0FBYyxFQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsU0FBUyxHQUFDLFNBQVMsQ0FBQztJQUc3QixDQUFDO0lBQ0QsNkJBQTZCO0lBQzdCLDZCQUFNLEdBQU4sVUFBTyxFQUFVO1FBQ2I7Ozs7Ozs7OztjQVNNLENBQUMsRUFBRSxDQUFBLENBQUMsRUFBRSxDQUFDO1lBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQztRQUNqQyxJQUFJO1lBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVELGlCQUFpQjtJQUNqQixxQ0FBYyxHQUFkLFVBQWUsRUFBWSxFQUFFLE9BQTRCO1FBQ3JELElBQUksSUFBSSxHQUFRLEVBQUUsQ0FBQztRQUNwQjs7OztlQUlPO1FBQ0wsRUFBRSxDQUFBLENBQUMsRUFBRSxDQUFDO1lBQ04sSUFBSSxHQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQztRQUMzQixJQUFJO1lBQ0osSUFBSSxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFHckIsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDdEgsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUM1QixJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDbkMsaUJBQWlCLEdBQUcsR0FBRyxDQUFBO1FBQzNCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksSUFBSSxpQkFBaUIsR0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNqRCxpQkFBaUIsR0FBRyxHQUFHLENBQUE7UUFDM0IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksSUFBSSxpQkFBaUIsR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0UsaUJBQWlCLEdBQUcsR0FBRyxDQUFBO1FBQzNCLENBQUM7UUFDQSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLElBQUksaUJBQWlCLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JFLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTtRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxJQUFJLGlCQUFpQixHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyRSxpQkFBaUIsR0FBRyxHQUFHLENBQUE7UUFDM0IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxJQUFJLGlCQUFpQixHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuRSxpQkFBaUIsR0FBRyxHQUFHLENBQUE7UUFDM0IsQ0FBQztRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUVoQixDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBckZELElBcUZDO0FBckZZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25maWdTZXJ2aWNlfSBmcm9tICcuLi9jb25maWcuc2VydmljZSc7XHJcbmltcG9ydCB7UmVxdWVzdFF1ZXJ5T3B0aW9ucyxNb2RlbFR5cGUsT2JqZWN0SWR9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2ludGVyZmFjZXNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIEFwaUludGVyZmFjZXtcclxuICAgIGJhc2V1cmw6c3RyaW5nO1xyXG4gICAgdXJscHJlZml4OnN0cmluZztcclxuICAgIG1vZGVsVHlwZTpNb2RlbFR5cGU7XHJcbiAgICBcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbW9kZWxUeXBlOk1vZGVsVHlwZSxcclxuICAgICAgICBwcml2YXRlIGNvbmZpZ1NlcnZpY2U6Q29uZmlnU2VydmljZVxyXG4gICAgICAgICl7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJDcmVhdGluZyBBUElJbnRlcmZhY2VcIixtb2RlbFR5cGUpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5iYXNldXJsPWNvbmZpZ1NlcnZpY2UuZ2V0QXBpVXJsKCk7XHJcbiAgICAgICAgdGhpcy51cmxwcmVmaXg9Y29uZmlnU2VydmljZS5BUElNT0RFTEtFWVNbbW9kZWxUeXBlXTtcclxuICAgICAgICBcclxuICAgICAgICBpZighdGhpcy51cmxwcmVmaXgpXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcmxwcmVmaXggZm9yIG1vZGVsXCIsbW9kZWxUeXBlLFwibm90IGZvdW5kIGluXCIsY29uZmlnU2VydmljZS5BUElNT0RFTEtFWVMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubW9kZWxUeXBlPW1vZGVsVHlwZTsgICAgXHJcbiAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgIH1cclxuICAgIC8vZm9yIFBPU1QgUFVUIERFTEVURSBxdWVyaWVzXHJcbiAgICBnZXRVcmwoaWQ/OnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIC8qaWYodGhpcy5tb2RlbFR5cGU9PT1NT0RFTFRZUEVTLkNhcnQpXHJcbiAgICAgICAgICAgIGlmKGlkIT09XCJteWNhcnRcIilcclxuICAgICAgICAgICAgcmV0dXJuIFwibXljYXJ0XCIrXCIvXCIraWQ7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIFwibXljYXJ0XCI7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5tb2RlbFR5cGU9PT1NT0RFTFRZUEVTLk1lKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJtZS9cIit0aGlzLmNvbmZpZ1NlcnZpY2UuYXBwO1xyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubW9kZWxUeXBlPT09TU9ERUxUWVBFUy5SZWdpc3RlcilcclxuICAgICAgICAgICAgcmV0dXJuIFwicmVnaXN0ZXIvXCIrdGhpcy5jb25maWdTZXJ2aWNlLmFwcDtcclxuICAgICAgICBlbHNlKi8gaWYoaWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVybHByZWZpeCtcIi9cIitpZDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVybHByZWZpeDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy9mb3IgR0VUIHF1ZXJpZXNcclxuICAgIGJ1aWxkVXJsU3VmZml4KGlkOiBPYmplY3RJZCwgb3B0aW9uczogUmVxdWVzdFF1ZXJ5T3B0aW9ucyk6c3RyaW5nIHtcclxuICAgICAgICBsZXQgYmFzZTpzdHJpbmc9XCJcIjtcclxuICAgICAgIC8qIGlmKHRoaXMubW9kZWxUeXBlPT09TU9ERUxUWVBFUy5DYXJ0KVxyXG4gICAgICAgICBiYXNlPVwibXljYXJ0XCI7XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLm1vZGVsVHlwZT09PU1PREVMVFlQRVMuTWUpXHJcbiAgICAgICAgIGJhc2U9aWQ7XHJcbiAgICAgICAgZWxzZSovXHJcbiAgICAgICAgIGlmKGlkKVxyXG4gICAgICAgICBiYXNlPXRoaXMudXJscHJlZml4K1wiL1wiK2lkO1xyXG4gICAgICAgICBlbHNlXHJcbiAgICAgICAgIGJhc2U9dGhpcy51cmxwcmVmaXg7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBcclxuICAgICAgICBsZXQgaGFzT3B0aW9ucyA9IG9wdGlvbnMucG9wdWxhdGUgfHwgb3B0aW9ucy5zZWxlY3QgfHwgb3B0aW9ucy5tYXRjaCB8fCBvcHRpb25zLnNvcnQgfHwgb3B0aW9ucy5saW1pdCB8fCBvcHRpb25zLnNraXA7XHJcbiAgICAgICAgaWYgKGhhc09wdGlvbnMpIGJhc2UgKz0gXCI/XCI7XHJcbiAgICAgICAgbGV0IGhhc0FscmVhZHlPcHRpb25zID0gXCJcIjtcclxuICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3QpIHtcclxuICAgICAgICAgICAgYmFzZSArPSBcInNlbGVjdD1cIiArIG9wdGlvbnMuc2VsZWN0O1xyXG4gICAgICAgICAgICBoYXNBbHJlYWR5T3B0aW9ucyA9IFwiJlwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNvcnQpIHtcclxuICAgICAgICAgICAgYmFzZSArPSBoYXNBbHJlYWR5T3B0aW9ucytcInNvcnQ9XCIgKyBvcHRpb25zLnNvcnQ7XHJcbiAgICAgICAgICAgIGhhc0FscmVhZHlPcHRpb25zID0gXCImXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucG9wdWxhdGUpIHtcclxuICAgICAgICAgICAgYmFzZSArPSBoYXNBbHJlYWR5T3B0aW9ucyArIFwicG9wdWxhdGU9XCIgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zLnBvcHVsYXRlKTtcclxuICAgICAgICAgICAgaGFzQWxyZWFkeU9wdGlvbnMgPSBcIiZcIlxyXG4gICAgICAgIH1cclxuICAgICAgICAgaWYgKG9wdGlvbnMubGltaXQpIHtcclxuICAgICAgICAgICAgYmFzZSArPSBoYXNBbHJlYWR5T3B0aW9ucyArIFwibGltaXQ9XCIgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zLmxpbWl0KTtcclxuICAgICAgICAgICAgaGFzQWxyZWFkeU9wdGlvbnMgPSBcIiZcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5tYXRjaCkge1xyXG4gICAgICAgICAgICBiYXNlICs9IGhhc0FscmVhZHlPcHRpb25zICsgXCJtYXRjaD1cIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubWF0Y2gpO1xyXG4gICAgICAgICAgICBoYXNBbHJlYWR5T3B0aW9ucyA9IFwiJlwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNraXApIHtcclxuICAgICAgICAgICAgYmFzZSArPSBoYXNBbHJlYWR5T3B0aW9ucyArIFwic2tpcD1cIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuc2tpcCk7XHJcbiAgICAgICAgICAgIGhhc0FscmVhZHlPcHRpb25zID0gXCImXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJidWlsZHVybHN1ZmZpeFwiLGJhc2UpO1xyXG4gICAgICAgIHJldHVybiBiYXNlO1xyXG5cclxuICAgIH1cclxufSJdfQ==