"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var model_service_1 = require("../../services/model.service");
var message_service_1 = require("../../services/message.service");
var console_service_1 = require("../../services/console.service");
var utils_1 = require("../../utils/utils");
var Library = (function () {
    function Library(modelService, consoleService, messageService) {
        this.modelService = modelService;
        this.consoleService = consoleService;
        this.messageService = messageService;
        this.isLoaded = false;
        this.library = {}; // { [key: string]: {modelType:ModelType,raw:any,model:Model}} = {};
        this.queue = {};
        this.consoleService.library("CREATE", this.modelService);
    }
    Library.prototype.isPreloaded = function () {
        return this.isLoaded;
    };
    Library.prototype.setPreloaded = function () {
        this.consoleService.library("READY", this.library);
        this.isLoaded = true;
        this.processQueue();
        this.messageService.libraryLoaded.emit({ loaded: true });
    };
    Library.prototype.processQueue = function () {
        this.consoleService.library("PROCESS QUEUE", this.queue);
        for (var id in this.queue) {
            var q = this.queue[id];
            //this.update(q.model, q.options);
            delete this.queue[id];
        }
    };
    Library.prototype.getLibrary = function () {
        return this.library;
    };
    Library.prototype.addRaw = function (raw, modelType) {
        var r = raw;
        r.modelType = modelType;
        this.library[raw._id] = r;
    };
    Library.prototype.updateField = function (id, fieldname, val) {
        this.library[id][fieldname] = val;
    };
    Library.prototype.completeUpdate = function (raw, modelType, options) {
        if (!this.isLoaded) {
            this.addToQueue(raw, options);
        }
        else {
            var id = raw._id;
            if (this.isCached(id)) {
                this.consoleService.library("completeUPDATE", raw, options);
                this.library[id] = raw;
                this.library[id].modelType = modelType;
            }
            else {
                console.log("update not cached add ", raw, "in", this.library);
                this.addRaw(raw, modelType);
            }
        }
    };
    Library.prototype.partialUpdateAll = function (raws, modelType, options) {
        for (var i = 0, n = raws.length; i < n; ++i) {
            this.partialUpdate(raws[i], modelType, options);
        }
    };
    Library.prototype.partialUpdateAllWithTimestamp = function (raws, modelType, options) {
        for (var i in raws.main) {
            this.partialUpdateWithTimestamp(raws.main[i], modelType, options);
        }
        for (var i in raws.populated) {
            this.partialUpdateWithTimestamp(raws.populated[i], modelType, options);
        }
    };
    Library.prototype.partialUpdateWithTimestamp = function (raw, modelType, options) {
        if (typeof raw === "string")
            return;
        if (!this.isLoaded) {
            this.addToQueue(raw, options);
        }
        else {
            var id = raw._id;
            if (this.isCached(id)) {
                //this.consoleService.library("partialUpdateWithTimestamp?");
                console.log("raw", raw);
                var ts = new Date(raw.updated).getTime();
                var storedts = new Date(this.library[id].updated).getTime();
                if (ts > storedts) {
                    //  this.consoleService.library("partialUpdateWithTimestamp do");
                    for (var key in raw) {
                        this.updateField(id, key, raw[key]);
                    }
                }
            }
            else {
                console.log("update not cached add ", raw, "in", this.library);
                this.addRaw(raw, modelType);
            }
        }
    };
    Library.prototype.partialUpdate = function (raw, modelType, options) {
        if (typeof raw === "string")
            return;
        if (!this.isLoaded) {
            this.addToQueue(raw, options);
        }
        else {
            var id = raw._id;
            if (this.isCached(id)) {
                this.consoleService.library("partial update", raw._id, "current=", this.library[id], "with new=", raw, options);
                for (var key in raw) {
                    this.updateField(id, key, raw[key]);
                }
            }
            else {
                console.log("update not cached add ", raw, "in", this.library);
                this.addRaw(raw, modelType);
            }
        }
    };
    Library.prototype.addToQueue = function (m, options) {
        this.consoleService.library("ADD TO QUEUE", m, options);
        this.queue[m._id] = { model: m, options: options };
    };
    Library.prototype.isCached = function (id) {
        return id in this.library;
    };
    Library.prototype.loadOneRaw = function (id, options) {
        if (this.isLoaded) {
            this.consoleService.library("LoadOne", id, (options || {}));
            var r = void 0;
            if (this.library[id]) {
                return utils_1.cloneRaw(this.library[id]); //make copy instead
            }
        }
        else {
            return null;
        }
    };
    Library.prototype.loadAllRaw = function (modelType, options) {
        if (this.isLoaded) {
            this.consoleService.library("LOAD ALL", modelType, options, this.library);
            var res = [];
            for (var id in this.library) {
                var e = this.library[id];
                if (modelType && e.modelType === modelType) {
                    res.push(this.loadOneRaw(id, options));
                }
            }
            ;
            return res;
        }
        else {
            return [];
        }
    };
    Library.prototype.getContent = function () {
        return this.library;
    };
    return Library;
}());
Library = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(model_service_1.ModelService)),
    __metadata("design:paramtypes", [model_service_1.ModelService,
        console_service_1.ConsoleService,
        message_service_1.MessageService])
], Library);
exports.Library = Library;
//# sourceMappingURL=data:application/json;base64,