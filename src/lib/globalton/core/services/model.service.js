"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var message_service_1 = require("../services/message.service");
var api_service_1 = require("../services/api.service");
var auth_service_1 = require("../services/auth.service");
var console_service_1 = require("../services/console.service");
var config_service_1 = require("../services/config.service");
var ModelLoader_1 = require("./ModelService/ModelLoader");
var Library_1 = require("./ModelService/Library");
var assert_1 = require("../utils/assert");
var DataAdapter_1 = require("./ModelService/DataAdapter");
var ModelService = (function () {
    function ModelService(apiService, consoleService, configService, messageService, authService) {
        var _this = this;
        this.apiService = apiService;
        this.consoleService = consoleService;
        this.configService = configService;
        this.messageService = messageService;
        this.authService = authService;
        this.modelUpdated = new core_1.EventEmitter();
        this.modelUpdateSubscribed = false;
        this.MODELS = {};
        this.isModelListLoaded = false;
        this.SERVER_RETURNS_ARRAYS = false;
        consoleService.serv("+ ModelService", configService);
        this.consoleService = consoleService;
        this.configService = configService;
        this.dataAdapter = new DataAdapter_1.DataAdapter(this, configService);
        this.apiService = apiService;
        //this.buildSchemas();
        this.library = new Library_1.Library(this, this.consoleService, this.messageService);
        this.loader = new ModelLoader_1.ModelLoader(this);
        this.authService.loginChanged.subscribe(function (value) { return _this.preloadAssetsIfLogged(value); }, function (error) { return console.log("Error updating flash" + error); }, function () { return console.log('done'); });
        if (this.authService.isAuthenticated()) {
            this.preload();
        }
        this.configService.perSiteConfigured.subscribe(function (value) { return _this.postConfigEvent(value); }, function (error) { return console.log("Error postConfigEvent" + error); }, function () { return console.log('done'); });
    }
    ModelService.prototype.setModelTypes = function (M) {
        this.MODELTYPES = M;
    };
    ModelService.prototype.postConfigEvent = function (value) {
        if (value.type == "models")
            this.isModelListLoaded = true;
        if (!this.authService.CONTENT_AUTHENTIFICATION)
            this.library.setPreloaded();
    };
    ModelService.prototype.emitModelUpdated = function (model, key) {
        this.modelUpdated.emit({ model: model, key: key });
    };
    ModelService.prototype.preloadAssetsIfLogged = function (value) {
        if (value) {
            this.preload();
        }
        else {
        }
    };
    ModelService.prototype.getInstance = function (modelType, rawdata) {
        assert_1.Assert.exists(modelType, "getInstance: get has no modelType, =" + modelType);
        var m = this.instancer.getInstance(modelType);
        if (rawdata)
            this.loader.loadObject(rawdata, m);
        m.modelType = modelType; //force modeltype for me vs user
        return m;
    };
    ModelService.prototype.preloadAssets = function (f) {
        this.apiService.authget("assets", function (A) {
            //this.library.readAssets(A);
            f(A);
        });
    };
    ModelService.prototype.preload = function () {
        var _this = this;
        if (this.configService.LIBRARY_ENABLED) {
            if (!this.library.isPreloaded()) {
                this.consoleService.library("PRELOAD");
                this.preloadAssets(function (T) {
                    _this.library.setPreloaded();
                });
            }
        }
    };
    /* Posts with auth at url and returns model */
    ModelService.prototype.post = function (url, model, f) {
        var _this = this;
        var modelType = model.modelType;
        this.apiService.authpost(url, model, function (rawdata) {
            console.log("Model postdata ", rawdata);
            var raw;
            if (_this.SERVER_RETURNS_ARRAYS) {
                var id = Object.keys(rawdata)[0];
                ;
                raw = rawdata[id];
            }
            else
                raw = rawdata;
            if (!rawdata.returnMultiple) {
                var returnedModel = _this.loader.get(modelType, raw, rawdata);
                console.log("Schema postdata returned model ", returnedModel);
                //TODO ADD TO LIBRARY
                f(returnedModel);
            }
            else {
                var returnedModel = _this.loader.get(modelType, raw, rawdata);
                if (_this.configService.LIBRARY_ENABLED && _this.library.isPreloaded())
                    _this.library.addRaw(raw, modelType);
                f(rawdata);
            }
        });
    };
    ModelService.prototype.put = function (url, model, f) {
        var _this = this;
        var modelType = model.modelType;
        console.log("Schema put", url);
        this.apiService.authput(url, model, function (rawdata) {
            //let returnedModel = this.buildModel(data, model.modelType);
            var id;
            console.log(Object.keys(rawdata));
            var k = Object.keys(rawdata);
            var raw;
            if (_this.SERVER_RETURNS_ARRAYS) {
                if (model._id && model._id in rawdata)
                    id = model._id;
                else
                    id = k[0];
                raw = rawdata[id];
            }
            else
                raw = rawdata;
            var returnedModel = _this.loader.get(modelType, raw, rawdata);
            console.log("Schema putdata ", returnedModel);
            if (_this.configService.LIBRARY_ENABLED && _this.library.isPreloaded() && _this.configService.UPDATE_AFTER_POSTPUTPATCH)
                _this.library.completeUpdate(raw, modelType);
            f(returnedModel);
        });
    };
    ModelService.prototype.patch = function (url, model, referenceRaw, f) {
        var _this = this;
        console.log("Schema patch url", url);
        var modelType = model.modelType;
        this.apiService.authpatch(url, model, referenceRaw, function (rawdata) {
            console.log("Schema patchdata ", rawdata);
            var id = model._id;
            var raw;
            if (_this.SERVER_RETURNS_ARRAYS)
                raw = rawdata[id];
            else
                raw = rawdata;
            var returnedModel = _this.loader.get(model.modelType, raw, rawdata);
            console.log("Schema patchdata ", returnedModel);
            if (_this.configService.LIBRARY_ENABLED && _this.library.isPreloaded() && _this.configService.UPDATE_AFTER_POSTPUTPATCH)
                _this.library.partialUpdate(raw, modelType);
            f(returnedModel);
        });
    };
    /* get many with url and returns models */
    ModelService.prototype.getAll = function (url, options, f, modelType) {
        var _this = this;
        this.apiService.authget(url, function (rawdata) {
            console.log("ModelService getAll data=", rawdata);
            var M;
            if (_this.SERVER_RETURNS_ARRAYS)
                M = _this.loader.getAll(modelType, rawdata.main, rawdata.populated, options);
            else
                M = _this.loader.getAll(modelType, rawdata, {}, options);
            _this.consoleService.load("getAll [models]=", M, M.length + " items");
            if (_this.configService.LIBRARY_ENABLED && _this.library.isPreloaded() && _this.configService.UPDATE_AFTER_GET)
                _this.library.partialUpdateAllWithTimestamp(rawdata, modelType);
            f(M);
        });
    };
    /* get many with url and returns models */
    ModelService.prototype.getOne = function (url, options, f, modelType) {
        var _this = this;
        this.apiService.authget(url, function (rawdatas) {
            if (!rawdatas) {
                console.error("ModelService getOne but no result");
                return null;
            }
            var id;
            var raw;
            if (_this.SERVER_RETURNS_ARRAYS) {
                if ("main" in rawdatas)
                    rawdatas = rawdatas["main"];
                id = Object.keys(rawdatas)[0];
                raw = rawdatas[id];
                raw._id = id;
            }
            else {
                raw = rawdatas;
            }
            var returnedModel = _this.loader.get(modelType, raw, rawdatas, options);
            if (_this.configService.LIBRARY_ENABLED && _this.library.isPreloaded() && _this.configService.UPDATE_AFTER_GET)
                _this.library.partialUpdateWithTimestamp(raw, modelType);
            f(returnedModel);
        });
    };
    ModelService.prototype.modelOne = function (raw, modelType, options) {
        if (options === void 0) { options = {}; }
        raw._id = raw.id;
        var returnedModel = this.loader.get(modelType, raw, raw, options);
        return returnedModel;
    };
    return ModelService;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ModelService.prototype, "modelUpdated", void 0);
ModelService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [api_service_1.ApiService,
        console_service_1.ConsoleService,
        config_service_1.ConfigService,
        message_service_1.MessageService,
        auth_service_1.AuthService])
], ModelService);
exports.ModelService = ModelService;
//# sourceMappingURL=data:application/json;base64,