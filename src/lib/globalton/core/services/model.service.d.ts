import { EventEmitter } from "@angular/core";
import {Model} from "../models/Model";
import { Schema } from "./ModelService/schema";
import { MessageService } from "../services/message.service";
import { ApiService } from '../services/api.service';
import { AuthService } from '../services/auth.service';
import { ConsoleService } from '../services/console.service';
import { ConfigService } from '../services/config.service';
import { ModelType, ObjectId, RequestQueryOptions } from "../interfaces/interfaces";
import { ModelLoader } from "./ModelService/ModelLoader";
import { ModelConfig } from "./ModelService/ModelConfig";
import { GenericLibrary } from "./ModelService/GenericLibrary";
export declare class ModelService {
    private messageService;
    private authService;
    modelUpdated: EventEmitter<any>;
    emitModelUpdated(model: Model, key: string): void;
    modelUpdateSubscribed: boolean;
    library: GenericLibrary;
    MODELS: ModelConfig[];
    loader: ModelLoader;
    POPULABLE_SINGLE_FIELDS: any;
    POPULABLE_ARRAY_FIELDS: any;
    POPULABLE_INNER_ARRAY_FIELD: any;
    apiService: ApiService;
    consoleService: ConsoleService;
    configService: ConfigService;
    constructor(apiService: ApiService, consoleService: ConsoleService, configService: ConfigService, messageService: MessageService, authService: AuthService);
    preloadAssetsIfLogged(value: boolean): void;
    buildSchemas(): void;
    getSchema(modelType: ModelType): Schema;
    getInstance<T extends Model>(modelType: ModelType, rawdata?: any): T;
    getModel(modelType: ModelType): ModelConfig;
    cacheLoadOne<T extends Model>(modelType: ModelType, id: ObjectId, options: RequestQueryOptions, f: any): void;
    cacheLoadMultiple<T extends Model>(modelType: ModelType, idlist: ObjectId[], options: RequestQueryOptions, f: any): void;
    cacheLoadAll<T extends Model>(modelType: ModelType, options: RequestQueryOptions, f: Function): void;
    loadOne<T extends Model>(modelType: ModelType, id: ObjectId, options: RequestQueryOptions, f: Function): void;
    loadMultiple<T extends Model>(modelType: ModelType, idlist: ObjectId[], options: RequestQueryOptions, f: Function): void;
    loadAll<T extends Model>(modelType: ModelType, options: RequestQueryOptions, f: Function): void;
    preloadAssets(f: Function): void;
    preload(): void;
    getSchemaTypeFromName(fieldname: string): ModelType;
}
